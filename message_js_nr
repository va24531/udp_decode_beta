// msg.decoded_msg_type 
// msg.new_decode (0/1)
// msg.decode_time (ms since midnight UTC, as reported by UDP Packet)
// msg.snr_report ( very useful for new contact/grid/county alert trigger. No need to notify if signal is very weak)
// msg.mode_string (~ is ft8)
// msg.qso_message_ascii - full decoded message, nothing more, nothing less. string trimming is done in post-processing
// msg.confidence_int (0/1)
// msg.offline_int (0/1)

// More disabled messages available at end of function.

//live example:
// -------------------------------------
// payload: " New Message "
// fromip: "127.0.0.1:59005"
// ip: "127.0.0.1"
// port: 59005
// _msgid: "181fe13b.f404cf"
// orig_message: buffer[66]
// decode_msg_type: 2
// magicpacket: "adbccbda"
// version: 2
// packet_type: 2
// sw_name: "JTDX"
// new_decode: 1
// decode_time: 63315000
// snr_report: -17
// mode_string: "~"
// qso_message_ascii: "4L8A PY7YZ -15"
// confidence_int: 0
// offline_int: 0
// -------------------------------------





// Do NOT Modify! -------------------------------------------------------------
        function hexToInt(hex) {
            if (hex.length % 2 != 0) {
                hex = "0" + hex;
            }
            var num = parseInt(hex, 16);
            var maxVal = Math.pow(2, hex.length / 2 * 8);
            if (num > maxVal / 2 - 1) {
                num = num - maxVal
            }
            return num;
        }


        // Creation of a function to get the Hex Value from a message
        function* hexFormatValues(buffer) {
            for (let x of buffer) {
                const hex = x.toString(16)
                yield hex.padStart(2, '0')
            }
        }


        msg.payload = msg.orig_message;

            // Variable declaration for my loop
                var string = ""
                const buf = Buffer.from(msg.payload)

            // Concatenation of the buffer in a string 
                for (let hex of hexFormatValues(buf)) {string = string + hex } 

            //msg.payload = string;

// Do NOT Modify! -------------------------------------------------------------


placeholder_start = 0;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
magic_packet = string.substring(placeholder_start,placeholder_stop);

placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
version = parseInt(string.substring(placeholder_start,placeholder_stop));

placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
packet_type = parseInt(string.substring(placeholder_start,placeholder_stop));


if (packet_type !== 2){  msg.other_decode = string; return msg;} // Stop Here If Not A Decode Message!


placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;

sw_size = string.substring(placeholder_start,placeholder_stop); // Decode Length Of Software Name (wsjt-x vs jtdx vs whatever)
sw_name_length = placeholder_start  + next_value_length + (parseInt(sw_size) * 2); // Convert hex value to true interger value, double it, and add it to the last hex position of 32
sw_name = string.substring(32,sw_name_length);      // Get hex of software name, length based on above

    var hex  = sw_name.toString();
	var sw_name_2 = '';
    for (var n = 0; n < hex.length; n += 2) { sw_name_2 += String.fromCharCode(parseInt(hex.substr(n, 2), 16));}
	// Convert software name from hex to ascii 

placeholder_start = sw_name_length;
next_value_length = 2;
placeholder_stop = placeholder_start + next_value_length;
hex_new_decode = string.substring(placeholder_start, placeholder_stop);
int_new_decode = parseInt(hex_new_decode);

// Decoded Milliseconds After Midnight UTC

placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
hex_decode_time = string.substring(placeholder_start,placeholder_stop);
real_decode_time = hexToInt(hex_decode_time);
// Decoded Milliseconds After Midnight UTC



// Signal-Noise-Ratio

placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
hex_snr_report = string.substring(placeholder_start,placeholder_stop);
real_snr_value = hexToInt(hex_snr_report);
// Signal-Noise-Ratio



// Delta Time
placeholder_start = placeholder_stop;
next_value_length = 16;
placeholder_stop = placeholder_start + next_value_length;
hex_delta_time = string.substring(placeholder_start,placeholder_stop);

// Delta Time


// Delta Frequency
placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
hex_delta_freq = string.substring(placeholder_start,placeholder_stop);
// Delta Frequency


// Mode
placeholder_start = placeholder_stop;
next_value_length = 10;
placeholder_stop = placeholder_start + next_value_length;
hex_mode = string.substring(placeholder_start,placeholder_stop);

    var hex_mode_string  = hex_mode.toString();
	var string_mode = '';
    for (n = 0; n < hex_mode_string.length; n += 2) { string_mode += String.fromCharCode(parseInt(hex_mode_string.substr(n, 2), 16));}
	// Convert software name from hex to ascii 
// Mode


// Actual Message Length

placeholder_start = placeholder_stop;
next_value_length = 8;
placeholder_stop = placeholder_start + next_value_length;
hex_qso_message_length = string.substring(placeholder_start,placeholder_stop);
int_qso_message_length = parseInt(hex_qso_message_length,16);

// Actual Message Length


// Actual Message

placeholder_start = placeholder_stop;
next_value_length = int_qso_message_length * 2;
placeholder_stop = placeholder_start + next_value_length;
hex_qso_message = string.substring(placeholder_start,placeholder_stop);


    var hex_message_convert  = hex_qso_message.toString();
	var ascii_message = '';
    for (n = 0; n < hex_message_convert.length; n += 2) { ascii_message += String.fromCharCode(parseInt(hex_message_convert.substr(n, 2), 16));}
	// Convert software name from hex to ascii

// Actual Message



// Low Confidence
placeholder_start = placeholder_stop;
next_value_length = 2;
placeholder_stop = placeholder_start + next_value_length;
hex_confidence = string.substring(placeholder_start,placeholder_stop);
int_confidence = parseInt(hex_confidence);
// Low Confidence


// Off Air 
placeholder_start = placeholder_stop;
next_value_length = 2;
placeholder_stop = placeholder_start + next_value_length;
hex_offline = string.substring(placeholder_start,placeholder_stop);
int_offline = parseInt(hex_offline);
// Off Air


msg.magicpacket = magic_packet;
msg.version = version;
msg.packet_type = packet_type;
msg.sw_name = sw_name_2;
msg.new_decode = int_new_decode;
//msg.decode_time_hex = hex_decode_time;
msg.decode_time = real_decode_time;
//msg.snr_report_hex = hex_snr_report;
msg.snr_report = real_snr_value;
//msg.delta_time_hex = hex_delta_time;
//msg.delta_freq_hex = hex_delta_freq;
//msg.mode_hex = hex_mode;
msg.mode_string = string_mode;
//msg.qso_message_length_hex = hex_qso_message_length;
//msg.qso_message_length_int = int_qso_message_length;
//msg.qso_message = hex_qso_message;
msg.qso_message_ascii = ascii_message;

//msg.confidence_hex = hex_confidence;
msg.confidence_int = int_confidence;
//msg.offline_hex = hex_offline;
msg.offline_int = int_offline;

//msg.packet_length = string.length;
//msg.full_packet = string;

msg.payload = ' New Message ';


return msg;


